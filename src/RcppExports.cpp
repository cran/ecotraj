// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// k2triangle
double k2triangle(double d1, double d2, double d3);
RcppExport SEXP _ecotraj_k2triangle(SEXP d1SEXP, SEXP d2SEXP, SEXP d3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< double >::type d3(d3SEXP);
    rcpp_result_gen = Rcpp::wrap(k2triangle(d1, d2, d3));
    return rcpp_result_gen;
END_RCPP
}
// triangleinequality
bool triangleinequality(double d1, double d2, double d3, double tol);
RcppExport SEXP _ecotraj_triangleinequality(SEXP d1SEXP, SEXP d2SEXP, SEXP d3SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< double >::type d3(d3SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(triangleinequality(d1, d2, d3, tol));
    return rcpp_result_gen;
END_RCPP
}
// ismetric
bool ismetric(NumericMatrix dmat, double tol);
RcppExport SEXP _ecotraj_ismetric(SEXP dmatSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ismetric(dmat, tol));
    return rcpp_result_gen;
END_RCPP
}
// projection
NumericVector projection(double dref, double d1, double d2, bool add);
RcppExport SEXP _ecotraj_projection(SEXP drefSEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP addSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dref(drefSEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< bool >::type add(addSEXP);
    rcpp_result_gen = Rcpp::wrap(projection(dref, d1, d2, add));
    return rcpp_result_gen;
END_RCPP
}
// angularAttributeConsecutive
double angularAttributeConsecutive(double d12, double d23, double d13, bool add);
RcppExport SEXP _ecotraj_angularAttributeConsecutive(SEXP d12SEXP, SEXP d23SEXP, SEXP d13SEXP, SEXP addSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d12(d12SEXP);
    Rcpp::traits::input_parameter< double >::type d23(d23SEXP);
    Rcpp::traits::input_parameter< double >::type d13(d13SEXP);
    Rcpp::traits::input_parameter< bool >::type add(addSEXP);
    rcpp_result_gen = Rcpp::wrap(angularAttributeConsecutive(d12, d23, d13, add));
    return rcpp_result_gen;
END_RCPP
}
// distanceToSegment
NumericVector distanceToSegment(double dref, double d1, double d2, bool add);
RcppExport SEXP _ecotraj_distanceToSegment(SEXP drefSEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP addSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dref(drefSEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< bool >::type add(addSEXP);
    rcpp_result_gen = Rcpp::wrap(distanceToSegment(dref, d1, d2, add));
    return rcpp_result_gen;
END_RCPP
}
// distanceToInterpolated
double distanceToInterpolated(double dref, double d1, double d2, double p, bool add);
RcppExport SEXP _ecotraj_distanceToInterpolated(SEXP drefSEXP, SEXP d1SEXP, SEXP d2SEXP, SEXP pSEXP, SEXP addSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type dref(drefSEXP);
    Rcpp::traits::input_parameter< double >::type d1(d1SEXP);
    Rcpp::traits::input_parameter< double >::type d2(d2SEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type add(addSEXP);
    rcpp_result_gen = Rcpp::wrap(distanceToInterpolated(dref, d1, d2, p, add));
    return rcpp_result_gen;
END_RCPP
}
// twoSegmentDistance
double twoSegmentDistance(NumericMatrix dmat12, String type, bool add);
RcppExport SEXP _ecotraj_twoSegmentDistance(SEXP dmat12SEXP, SEXP typeSEXP, SEXP addSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat12(dmat12SEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type add(addSEXP);
    rcpp_result_gen = Rcpp::wrap(twoSegmentDistance(dmat12, type, add));
    return rcpp_result_gen;
END_RCPP
}
// distanceToClusters
NumericMatrix distanceToClusters(NumericMatrix dmat, NumericMatrix umat);
RcppExport SEXP _ecotraj_distanceToClusters(SEXP dmatSEXP, SEXP umatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type umat(umatSEXP);
    rcpp_result_gen = Rcpp::wrap(distanceToClusters(dmat, umat));
    return rcpp_result_gen;
END_RCPP
}
// distanceBetweenClusters
NumericMatrix distanceBetweenClusters(NumericMatrix dmat, NumericMatrix umat);
RcppExport SEXP _ecotraj_distanceBetweenClusters(SEXP dmatSEXP, SEXP umatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type umat(umatSEXP);
    rcpp_result_gen = Rcpp::wrap(distanceBetweenClusters(dmat, umat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ecotraj_k2triangle", (DL_FUNC) &_ecotraj_k2triangle, 3},
    {"_ecotraj_triangleinequality", (DL_FUNC) &_ecotraj_triangleinequality, 4},
    {"_ecotraj_ismetric", (DL_FUNC) &_ecotraj_ismetric, 2},
    {"_ecotraj_projection", (DL_FUNC) &_ecotraj_projection, 4},
    {"_ecotraj_angularAttributeConsecutive", (DL_FUNC) &_ecotraj_angularAttributeConsecutive, 4},
    {"_ecotraj_distanceToSegment", (DL_FUNC) &_ecotraj_distanceToSegment, 4},
    {"_ecotraj_distanceToInterpolated", (DL_FUNC) &_ecotraj_distanceToInterpolated, 5},
    {"_ecotraj_twoSegmentDistance", (DL_FUNC) &_ecotraj_twoSegmentDistance, 3},
    {"_ecotraj_distanceToClusters", (DL_FUNC) &_ecotraj_distanceToClusters, 2},
    {"_ecotraj_distanceBetweenClusters", (DL_FUNC) &_ecotraj_distanceBetweenClusters, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ecotraj(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
